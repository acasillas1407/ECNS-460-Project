read_and_clean <- function(file_path) {
read_csv(file_path) %>%
clean_names() %>%
pivot_longer(cols = -c(reporter_name, partner_name, trade_flow, product_group, indicator),
names_to = "year", values_to = "value")
}
# Actual file paths
file_paths <- c("Data/CAN_exp.csv",
"Data/CAN_Imp.csv",
"Data/MEX_exp.csv",
"Data/MEX_imp.csv")
# Read and clean data using the defined function
data_list <- lapply(file_paths, read_and_clean)
# Combine data sets
trade_volume_df <- bind_rows(data_list)
# Data Manipulation
trade_volume_df <- trade_volume_df %>%
mutate(
# Remove 'x' prefix and then convert to numeric
year = as.numeric(sub("x", "", year)),
partner_name = as.factor(partner_name),
trade_flow = as.factor(trade_flow),
product_group = as.factor(product_group),
value = ifelse(value > 0, log(value), NA)
) %>%
# Update product group classifications
mutate(product_group = case_when(
product_group %in% c("Food products", "Animal", "Vegetables", "Hides and Skins") ~ "Agriculture",
product_group %in% c("Stone and Glass", "Wood", "Plastic or Rubber", "Raw materials") ~ "Raw materials",
product_group %in% c("Textiles and Clothing", "Footwear") ~ "Textiles, Clothing & Footwear",
TRUE ~ product_group
))
trade_volume_df
# Filter datasets for NAFTA and Non-NAFTA product groups
nafta_target <- c("Capital goods", "Mach and Elec", "Transportation", "Intermediate Goods", "Agriculture")
not_nafta_target <- c("Miscellaneous", "Minerals", "Metals", "Raw materials",
"Consumer goods", "Chemicals", "Textiles and Clothing", "Fuels")
nafta_dataset <- filter(trade_volume_df, product_group %in% nafta_target)
not_nafta_dataset <- filter(trade_volume_df, product_group %in% not_nafta_target)
#######################################
# Load required libraries
library(tidyverse)
library(ggrepel)
# Add a new column for combined Partner Name and Trade Flow
trade_volume_df <- trade_volume_df %>%
mutate(Combined = paste(partner_name, trade_flow, sep = " - "))
# Prepare the label data
label_data <- trade_volume_df %>%
filter(product_group == "All Products") %>%
group_by(Combined) %>%
summarize(start = round(first(value), 2), end = round(last(value), 2),
first_year = first(year), last_year = last(year)) %>%
ungroup()
# Main plot
line_chart <- trade_volume_df %>%
filter(product_group == "All Products") %>%
ggplot(aes(x = year, y = value, color = Combined)) +
geom_line() +
geom_label_repel(data = label_data, aes(x = first_year, y = start, label = start, color = Combined),
nudge_x = -0.2, nudge_y = 0,
arrow = arrow(type = "open", angle = 15, length = unit(0.1, "inches")),
show.legend = FALSE) +
geom_label_repel(data = label_data, aes(x = last_year, y = end, label = end, color = Combined),
nudge_x = 0.2, nudge_y = 0,
arrow = arrow(type = "open", angle = 15, length = unit(0.1, "inches")),
show.legend = FALSE) +
labs(title = "Comparative Trade Trends of Canada and Mexico Over Time by Value",
x = "Year",
y = "Log-scaled Trade Value",
color = "Trade Flow") +
scale_color_manual(values = c("Canada - Export" = "blue", "Mexico - Export" = "darkgreen",
"Canada - Import" = "red", "Mexico - Import" = "purple")) +
theme_minimal() +
theme(legend.position = c(0.95, 0.05), # Position the legend inside the plot
legend.justification = c("right", "bottom"), # Anchor the legend at bottom right
legend.box.just = "right", # Justify the legend box
legend.margin = margin(-6, -6, -6, -6)) # Adjust legend margin
# Print the line chart
line_chart
viz2 = line_chart
ggsave("figs/viz2.png", viz2, width = 8, height = 6)
# Function to calculate mode
calculate_mode <- function(x) {
dens <- density(x, na.rm = TRUE)
x_value <- dens$x[which.max(dens$y)]
return(x_value)
}
# Calculate modes
nafta_mode <- calculate_mode(nafta_dataset$value)
not_nafta_mode <- calculate_mode(not_nafta_dataset$value)
# Create a combined density plot
combined_density_plot <- ggplot() +
geom_density(data = nafta_dataset, aes(x = value, fill = "NAFTA"), alpha = 0.5) +
geom_density(data = not_nafta_dataset, aes(x = value, fill = "Non-NAFTA"), alpha = 0.5) +
geom_vline(xintercept = nafta_mode, color = "blue", linetype = "solid") +
geom_vline(xintercept = not_nafta_mode, color = "red", linetype = "solid") +
scale_fill_manual(values = c("blue", "red")) +
ggtitle("Overlayed Density Plot for NAFTA and Not NAFTA targeted Data") +
xlab("Value") +
ylab("Density") +
theme_minimal() +
guides(fill = guide_legend(title = "Dataset"))
# Print the combined plot
print(combined_density_plot)
viz3 = combined_density_plot
ggsave("figs/viz3.png", viz3, width = 8, height = 6)
# Assuming trade_volume_df is already created and ready to use
combined_data <- trade_volume_df %>%
group_by(product_group, year) %>%
summarize(Value = mean(value, na.rm = TRUE)) %>%
ungroup()
# Convert Year to a factor for the heatmap
combined_data$year <- as.factor(combined_data$year)
# Calculate the first and last year's value for each product group
percent_increase_data <- combined_data %>%
group_by(product_group) %>%
summarize(Start = first(Value),
End = last(Value)) %>%
mutate(PercentIncrease = ((End - Start) / Start) * 100) %>%
ungroup() %>%
select(product_group, PercentIncrease)
# Sort product groups with 'All Products' at the top
combined_data$product_group <- factor(combined_data$product_group,
levels = c("All Products", sort(setdiff(unique(combined_data$product_group), "All Products"))))
# Create the heatmap
heatmap_plot <- ggplot(combined_data, aes(x = year, y = product_group, fill = Value)) +
geom_tile() +
scale_fill_gradient2(low = "blue", high = "red", mid = "yellow", midpoint = median(combined_data$Value, na.rm = TRUE),
limits = c(min(combined_data$Value, na.rm = TRUE), max(combined_data$Value, na.rm = TRUE))) +
geom_text(data = percent_increase_data, aes(label = sprintf("%.1f%%", PercentIncrease), y = product_group, x = 1),
hjust = -0.1, color = "black", inherit.aes = FALSE) +
labs(title = "Heat Map of Trade Volumes with Percent Increase", x = "Year", y = "Product Group") +
theme_minimal() +
theme(plot.margin = margin(1, 8, 1, 1)) +
scale_x_discrete(breaks = function(x) seq(min(as.numeric(x)), max(as.numeric(x)), by = 5)) # Display only every fifth year
# Create the heatmap
heatmap_plot <- ggplot(combined_data, aes(x = year, y = product_group, fill = Value)) +
geom_tile() +
scale_fill_gradient2(low = "blue", high = "red", mid = "yellow", midpoint = median(combined_data$Value, na.rm = TRUE),
limits = c(min(combined_data$Value, na.rm = TRUE), max(combined_data$Value, na.rm = TRUE))) +
geom_text(data = percent_increase_data, aes(label = sprintf("%.1f%%", PercentIncrease), y = product_group, x = 1),
hjust = -0.1, color = "black", inherit.aes = FALSE) +
labs(title = "Heat Map of Trade Volumes with Percent Increase", x = "Year", y = "Product Group") +
theme_minimal() +
theme(plot.margin = margin(1, 8, 1, 1)) +
scale_x_discrete(breaks = function(x) seq(min(as.numeric(x)), max(as.numeric(x)), by = 5)) # Display only every fifth year
# Print the heatmap
heatmap_plot
# Assuming trade_volume_df is already created and ready to use
combined_data <- trade_volume_df %>%
group_by(product_group, year) %>%
summarize(Value = mean(value, na.rm = TRUE)) %>%
ungroup()
# Convert Year to a factor for the heatmap
combined_data$year <- as.factor(combined_data$year)
# Calculate the first and last year's value for each product group
percent_increase_data <- combined_data %>%
group_by(product_group) %>%
summarize(Start = first(Value),
End = last(Value)) %>%
mutate(PercentIncrease = ((End - Start) / Start) * 100) %>%
ungroup() %>%
select(product_group, PercentIncrease)
# Sort product groups in alphabetical order with 'All Products' at the end
combined_data$product_group <- factor(combined_data$product_group,
levels = c(sort(setdiff(unique(combined_data$product_group), "All Products")), "All Products"))
# Create the heatmap
heatmap_plot <- ggplot(combined_data, aes(x = year, y = product_group, fill = Value)) +
geom_tile() +
scale_fill_gradient2(low = "blue", high = "red", mid = "yellow", midpoint = median(combined_data$Value, na.rm = TRUE),
limits = c(min(combined_data$Value, na.rm = TRUE), max(combined_data$Value, na.rm = TRUE))) +
geom_text(data = percent_increase_data, aes(label = sprintf("%.1f%%", PercentIncrease), y = product_group, x = 1),
hjust = -0.1, color = "black", inherit.aes = FALSE) +
labs(title = "Heat Map of Trade Volumes with Percent Increase", x = "Year", y = "Product Group") +
theme_minimal() +
theme(plot.margin = margin(1, 8, 1, 1)) +
scale_x_discrete(breaks = function(x) seq(min(as.numeric(x)), max(as.numeric(x)), by = 5)) # Display only every fifth year
# Print the heatmap
heatmap_plot
viz5 = heatmap_plot
ggsave("figs/viz5.png", viz5, width = 8, height = 6)
# Example: Filtering for trade data involving the United States and Canada
filtered_data <- trade_volume_df %>%
filter(reporter_name == "United States", partner_name == "Canada")
# Time Series Line Chart
ggplot(filtered_data, aes(x = year, y = value, color = product_group)) +
geom_line() +
facet_wrap(~product_group, scales = "free_y") +
labs(title = "Trade Volume Trends Over Time by Product Group (CAN)",
x = "Year",
y = "Trade Volume (log scale)",
color = "Product Group") +
theme_minimal() +
geom_vline(xintercept = 1994, linetype = "dashed", color = "red")  # Marking the year NAFTA was implemented
# Example: Filtering for trade data involving the United States and Canada
filtered_data <- trade_volume_df %>%
filter(reporter_name == "United States", partner_name == "Mexico")
# Time Series Line Chart
ggplot(filtered_data, aes(x = year, y = value, color = product_group)) +
geom_line() +
facet_wrap(~product_group, scales = "free_y") +
labs(title = "Trade Volume Trends Over Time by Product Group (MEX)",
x = "Year",
y = "Trade Volume (log scale)",
color = "Product Group") +
theme_minimal() +
geom_vline(xintercept = 1994, linetype = "dashed", color = "red")  # Marking the year NAFTA was implemented
# Load required libraries
library(tidyverse)
# Example: Filtering for trade data involving the United States and Canada
filtered_data <- trade_volume_df %>%
filter(reporter_name == "United States", partner_name == "Canada")
# Time Series Line Chart with Trend Analysis
can_trend_plot <- ggplot(filtered_data, aes(x = year, y = value, color = product_group)) +
geom_line() +
geom_smooth(method = "lm", se = FALSE) +  # Adding trend lines for each product group
facet_wrap(~product_group, scales = "free_y") +
labs(title = "Trade Volume Trends Over Time by Product Group (CAN) with Trend Analysis",
x = "Year",
y = "Trade Volume (log scale)",
color = "Product Group") +
theme_minimal() +
geom_vline(xintercept = 1994, linetype = "dashed", color = "red")  # Marking the year NAFTA was implemented
viz6 = can_trend_plot
ggsave("figs/viz6.png", viz6, width = 8, height = 6)
# Example: Filtering for trade data involving the United States and Canada
filtered_data <- trade_volume_df %>%
filter(reporter_name == "United States", partner_name == "Mexico")
# Time Series Line Chart with Trend Analysis
mex_trend_plot <- ggplot(filtered_data, aes(x = year, y = value, color = product_group)) +
geom_line() +
geom_smooth(method = "lm", se = FALSE) +  # Adding trend lines for each product group
facet_wrap(~product_group, scales = "free_y") +
labs(title = "Trade Volume Trends Over Time by Product Group (MEX) with Trend Analysis",
x = "Year",
y = "Trade Volume (log scale)",
color = "Product Group") +
theme_minimal() +
geom_vline(xintercept = 1994, linetype = "dashed", color = "red") # Marking the year NAFTA was implemented
viz7 = mex_trend_plot
ggsave("figs/viz7.png", viz7, width = 8, height = 6)
##################################################
# Reclassify certain product groups into broader categories
trade_volume_df <- trade_volume_df %>%
mutate(product_group = case_when(
product_group %in% c("Food products", "Animal", "Vegetables", "Hides and Skins") ~ "Agriculture",
product_group %in% c("Stone and Glass", "Wood", "Plastic or Rubber", "Raw materials") ~ "Raw materials",
product_group %in% c("Textiles and Clothing", "Footwear") ~ "Textiles, Clothing & Footwear",
TRUE ~ product_group
))
# Check the first few rows of the data to confirm reclassification
head(trade_volume_df)
# Proceed with filtering for the NAFTA analysis
filtered_data <- trade_volume_df %>%
filter(reporter_name == "United States", partner_name == "Canada") %>%
mutate(NAFTA_Period = ifelse(year < 1994, "Pre-NAFTA", "Post-NAFTA"))
# Time Series Line Chart for NAFTA Analysis
nafta_chart <- ggplot(filtered_data, aes(x = year, y = value, color = NAFTA_Period)) +
geom_line() +
facet_wrap(~product_group, scales = "free_y") +
labs(title = "Trade Volume Trends by Product Group: Pre-NAFTA vs. Post-NAFTA",
x = "Year",
y = "Trade Volume (log scale)",
color = "NAFTA Period") +
theme_minimal() +
geom_vline(xintercept = 1994, linetype = "dashed", color = "red", size = 1) +
scale_color_manual(values = c("Pre-NAFTA" = "blue", "Post-NAFTA" = "darkgreen"))
# Print the NAFTA analysis chart
nafta_chart
# List unique product group names
unique(trade_volume_df$product_group)
# Reclassify certain product groups into broader categories
trade_volume_df <- trade_volume_df %>%
mutate(product_group = case_when(
product_group %in% c("Food Products", "Animal", "Vegetable", "Hides and Skins") ~ "Agriculture",
product_group %in% c("Stone and Glass", "Wood", "Plastic or Rubber", "Raw materials") ~ "Raw materials",
product_group %in% c("Textiles and Clothing", "Footwear") ~ "Textiles, Clothing & Footwear",
TRUE ~ product_group
))
# Check the first few rows of the data to confirm reclassification
head(trade_volume_df)
# Load required libraries
library(tidyverse)
library(patchwork)
# Group by Product Group and extract first and last values
first_values_dataset <- trade_volume_df %>%
group_by(product_group) %>%
summarize(First_Value = first(value), .groups = 'drop')
last_values_dataset <- trade_volume_df %>%
group_by(product_group) %>%
summarize(Last_Value = last(value), .groups = 'drop')
# Calculate percentages for the first and last values datasets
first_values_dataset <- first_values_dataset %>%
mutate(Total = sum(First_Value)) %>%
mutate(Percent = First_Value / Total * 100)
last_values_dataset <- last_values_dataset %>%
mutate(Total = sum(Last_Value)) %>%
mutate(Percent = Last_Value / Total * 100)
# Create stacked bar charts for first and last values
first_plot <- ggplot(first_values_dataset, aes(x = factor(1), y = First_Value, fill = product_group)) +
geom_bar(stat = "identity", position = "stack") +
geom_text(aes(label = ifelse(First_Value > 0, paste0(round(Percent, 1), "%"), "")),
position = position_stack(vjust = 0.5), color = "black") +
labs(title = "First Recorded Values", x = "", y = "Trade Volume (Log-Transformed)") +
theme_minimal() +
theme(legend.position = "none", axis.text.x = element_blank(), axis.ticks.x = element_blank())
last_plot <- ggplot(last_values_dataset, aes(x = factor(1), y = Last_Value, fill = product_group)) +
geom_bar(stat = "identity", position = "stack") +
geom_text(aes(label = ifelse(Last_Value > 0, paste0(round(Percent, 1), "%"), "")),
position = position_stack(vjust = 0.5), color = "black") +
labs(title = "Last Recorded Values", x = "", y = "Trade Volume (Log-Transformed)") +
theme_minimal() +
theme(legend.position = "none", axis.text.x = element_blank(), axis.ticks.x = element_blank())
# Combine the plots side by side
stacked_barchart <- first_plot | last_plot & theme(legend.position = "bottom")
# Display the combined plot
print(stacked_barchart)
viz4 = stacked_barchart
ggsave("figs/viz4.png", viz4, width = 8, height = 6)
################
# Load required libraries
library(tidyverse)
# Group by Product Group and extract first and last values
first_values_dataset <- trade_volume_df %>%
group_by(product_group) %>%
summarize(First_Value = first(value), .groups = 'drop')
last_values_dataset <- trade_volume_df %>%
group_by(product_group) %>%
summarize(Last_Value = last(value), .groups = 'drop')
# Join the first and last datasets for comparison
comparison_dataset <- first_values_dataset %>%
inner_join(last_values_dataset, by = "product_group")
# Calculate percentages for the first and last values datasets
comparison_dataset <- comparison_dataset %>%
mutate(Total_First = sum(First_Value),
Total_Last = sum(Last_Value),
Percent_First = First_Value / Total_First * 100,
Percent_Last = Last_Value / Total_Last * 100)
# Create stacked bar charts for first values
first_plot <- ggplot(comparison_dataset, aes(x = factor(1), y = First_Value, fill = product_group)) +
geom_bar(stat = "identity", position = "stack") +
geom_text(aes(label = ifelse(First_Value > 0, paste0(round(Percent_First, 1), "%"), "")),
position = position_stack(vjust = 0.5), color = "white") +
labs(title = "First Recorded Values", x = "", y = "Trade Volume (Log-Transformed)") +
theme_minimal() +
theme(legend.position = "none", axis.text.x = element_blank(), axis.ticks.x = element_blank())
# Create stacked bar charts for last values with conditional color
last_plot <- ggplot(comparison_dataset, aes(x = factor(1), y = Last_Value, fill = product_group)) +
geom_bar(stat = "identity", position = "stack") +
geom_text(aes(label = ifelse(Last_Value > 0, paste0(round(Percent_Last, 1), "%"), ""),
color = ifelse(Last_Value > First_Value, "black", "white")),
position = position_stack(vjust = 0.5)) +
labs(title = "Last Recorded Values", x = "", y = "Trade Volume (Log-Transformed)") +
scale_color_identity() +  # To apply the conditional colors
theme_minimal() +
theme(legend.position = "none", axis.text.x = element_blank(), axis.ticks.x = element_blank())
# Combine the plots side by side
combined_plot <- first_plot | last_plot & theme(legend.position = "bottom")
# Display the combined plot
print(combined_plot)
############
# Load required libraries
library(tidyverse)
library(patchwork)
# Group by Product Group and extract first and last values
first_values_dataset <- trade_volume_df %>%
group_by(product_group) %>%
summarize(First_Value = first(value), .groups = 'drop')
last_values_dataset <- trade_volume_df %>%
group_by(product_group) %>%
summarize(Last_Value = last(value), .groups = 'drop')
# Join the first and last datasets for comparison
comparison_dataset <- first_values_dataset %>%
inner_join(last_values_dataset, by = "product_group")
# Calculate percentages for the first and last values datasets
comparison_dataset <- comparison_dataset %>%
mutate(Total_First = sum(First_Value),
Total_Last = sum(Last_Value),
Percent_First = First_Value / Total_First * 100,
Percent_Last = Last_Value / Total_Last * 100)
# Create stacked bar charts for first values
first_plot <- ggplot(comparison_dataset, aes(x = factor(1), y = First_Value, fill = product_group)) +
geom_bar(stat = "identity", position = "stack") +
geom_text(aes(label = ifelse(First_Value > 0, paste0(round(Percent_First, 1), "%"), "")),
position = position_stack(vjust = 0.5), color = "white") +
labs(title = "First Recorded Values", x = "", y = "Trade Volume (Log-Transformed)") +
theme_minimal() +
theme(legend.position = "none", axis.text.x = element_blank(), axis.ticks.x = element_blank())
# Create stacked bar charts for last values with conditional color
last_plot <- ggplot(comparison_dataset, aes(x = factor(1), y = Last_Value, fill = product_group)) +
geom_bar(stat = "identity", position = "stack") +
geom_text(aes(label = ifelse(Last_Value > 0, paste0(round(Percent_Last, 1), "%"), ""),
color = ifelse(Last_Value > First_Value, "black", "white")),
position = position_stack(vjust = 0.5)) +
labs(title = "Last Recorded Values", x = "", y = "Trade Volume (Log-Transformed)") +
scale_color_identity() +  # To apply the conditional colors
theme_minimal() +
theme(legend.position = "none", axis.text.x = element_blank(), axis.ticks.x = element_blank())
combined_plot <- (first_plot | last_plot) + plot_layout(guides = 'collect') & theme(legend.position = "bottom")
print(combined_plot)
# Install and load the treemap package
if (!requireNamespace("treemap", quietly = TRUE)) {
install.packages("treemap")
}
library(treemap)
library(magick)
# Aggregate data by product group
aggregated_data <- trade_volume_df %>%
filter(partner_name %in% c("Canada", "Mexico"), trade_flow == "Export") %>%
group_by(product_group) %>%
summarize(total_trade = sum(value, na.rm = TRUE), .groups = 'drop')
# Create the treemap
treemap(aggregated_data,
index = "product_group",
vSize = "total_trade",
title = "Treemap of Trade Volumes for NAFTA Product Groups",
fontsize.labels = 12,
fontcolor.labels = "black",
bg.labels = "#444444",
border.col = "white",
vColor = "total_trade",
palette = "Spectral")
file_path <- "figs/tree.jpg"
# Read the JPG image
img <- image_read(file_path)
image_display(img)
gg <- ggplot() +
# Add a blank plot
geom_blank() +
# Add the image as a raster
annotation_raster(img, xmin = 0, xmax = 1.05, ymin = 0, ymax = 1.05)
gg
viz1 = gg
ggsave("figs/viz1.png", viz1, width = 8, height = 6)
###############################################
# Install and load the networkD3 package
if (!requireNamespace("networkD3", quietly = TRUE)) {
install.packages("networkD3")
}
library(networkD3)
# Prepare the data for the Sankey Diagram
sankey_data <- trade_volume_df %>%
filter(partner_name %in% c("Canada", "Mexico"), trade_flow == "Export") %>%
group_by(reporter_name, product_group) %>%
summarize(total_trade = sum(value, na.rm = TRUE), .groups = 'drop')
# Create a list of unique nodes (countries and product groups)
nodes <- data.frame(name = unique(c(as.character(sankey_data$reporter_name), as.character(sankey_data$product_group))))
# Map the reporter_name and product_group to node indices
sankey_data$ID_reporter <- match(sankey_data$reporter_name, nodes$name) - 1
sankey_data$ID_product_group <- match(sankey_data$product_group, nodes$name) - 1
# Create links data frame
links <- data.frame(source = sankey_data$ID_reporter,
target = sankey_data$ID_product_group,
value = sankey_data$total_trade)
# Create the Sankey Diagram
sankey <- sankeyNetwork(Links = links, Nodes = nodes, Source = "source", Target = "target", Value = "value", NodeID = "name", units = "USD")
# Print the Sankey Diagram
print(sankey)
# Load required libraries
library(tidyverse)
# Filter for Canada and Mexico trade data
can_mex_trade_data <- trade_volume_df %>%
filter(partner_name %in% c("Canada", "Mexico"),
trade_flow == "Export") # Assuming we're focusing on exports
# Create the bubble chart
bubble_chart <- ggplot(can_mex_trade_data, aes(x = year, y = product_group, size = value)) +
geom_point(aes(color = partner_name), alpha = 0.7) +
scale_size_continuous(name = "Trade Volume") +
labs(title = "Trade Volume Bubble Chart: Canada and Mexico",
x = "Year",
y = "Product Group",
color = "Partner Name") +
theme_minimal() +
theme(legend.position = "bottom",
axis.text.x = element_text(angle = 45, hjust = 1))
# Display the bubble chart
print(bubble_chart)
# Load required libraries
library(tidyverse)
# Filter for Canada and Mexico trade data
can_mex_trade_data <- trade_volume_df %>%
filter(partner_name %in% c("Mexico", "Canada"),
trade_flow == "Export") # Assuming we're focusing on exports
# Define custom colors
custom_colors <- c("Canada" = "blue", "Mexico" = "red")
# Create the bubble chart with custom color ordering
bubble_chart <- ggplot(can_mex_trade_data, aes(x = year, y = product_group, size = value)) +
geom_point(aes(color = partner_name), alpha = 0.7) +
scale_size_continuous(name = "Trade Volume") +
scale_color_manual(values = custom_colors) +  # Apply custom colors
labs(title = "Trade Volume Bubble Chart: Canada and Mexico",
x = "Year",
y = "Product Group",
color = "Partner Name") +
theme_minimal() +
theme(legend.position = "bottom",
axis.text.x = element_text(angle = 45, hjust = 1))
# Display the bubble chart
print(bubble_chart)
viz8 = bubble_chart
ggsave("figs/viz8.png", viz8, width = 8, height = 6)
setwd("C:/Users/acasi/OneDrive/Documents/GitHub/ECNS-460-Project")
ggsave("viz1.png", viz1, width = 8, height = 6)
ggsave("viz8.png", viz8, width = 8, height = 6)
ggsave("viz2.png", viz2, width = 8, height = 6)
ggsave("viz3.png", viz3, width = 8, height = 6)
ggsave("viz5.png", viz5, width = 8, height = 6)
ggsave
ggsave("viz6.png", viz6, width = 8, height = 6)
ggsave("viz7.png", viz7, width = 8, height = 6)
ggsave("viz4.png", viz4, width = 8, height = 6)
setwd("C:/Users/acasi/OneDrive/Documents/GitHub/ECNS-460-Project")
